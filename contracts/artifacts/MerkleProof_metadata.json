{
	"compiler": {
		"version": "0.8.19+commit.7dd6d404"
	},
	"language": "Solidity",
	"output": {
		"abi": [],
		"devdoc": {
			"details": "These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.",
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/KEEPER_flattened.sol": "MerkleProof"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/KEEPER_flattened.sol": {
			"keccak256": "0xb311c2c5f8d8fe4ab8a52d84d3f45ccdd96336dd3807761271912092f0429f87",
			"license": "MIT",
			"urls": [
				"bzz-raw://8da7095a8539fa9cb394ed05a27744bf048ac4f99eff94e9b17d1b429710cc86",
				"dweb:/ipfs/QmNtWfsnMgMWZprquMV68bSZRsHcq5aSoyKfMP68CLPWkp"
			]
		}
	},
	"version": 1
}